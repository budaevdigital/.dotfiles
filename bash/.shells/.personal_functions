# Для работы функций:
# - see_vpn_is_active - нужен wireguard
# - mount_webdav, backup_zip_file_on_mailcloud - нужен davfs2
#       и настроенный webdav протокол облака



############## ALIAS OPTIONS ################

alias vpn='see_vpn_is_active'
alias mnweb='mount_webdav'
alias unweb='unmount_webdav'
alias obsidian-backup='mount_webdav && zip_files $OBSIDIAN_ZIP $OBSIDIAN_DIR && backup_zip_file_on_mailcloud $OBSIDIAN_DIR $OBSIDIAN_ZIP $OBSIDIAN_BACKUP_DIR && unmount_webdav'
alias obsidian-git='sync_obsidian_git_dir && directory_git_push $OBSIDIAN_GIT_DIR'

# Для быстрого запуска Flatpak приложений
# Работает только если пакет установлен через Flatpak

alias postman='com.getpostman.Postman'
alias wireshark='org.wireshark.Wireshark'
alias telegram='org.telegram.desktop'
# alias obsidian='md.obsidian.Obsidian'
# alias code='flatpak run com.visualstudio.code'


############## FUNCTIONS OPTIONS ################

# Директории для бэкапа заметок Obsidian
OBSIDIAN_ZIP=obsidian.zip
OBSIDIAN_DIR=/mnt/projects/Note/Obsidian
OBSIDIAN_BACKUP_DIR=/mnt/mailcloud/Backup_Obsidian

OBSIDIAN_GIT_PROJECT=Knowledge\ Base
OBSIDIAN_GIT_DIR=/home/$USER/Documents/Code/Git/Knowledge_Base

function sync_obsidian_git_dir() {
  if [ -d "$OBSIDIAN_GIT_DIR" ] && [ -d "$OBSIDIAN_DIR" ]; then
    rsync -arvHl --progress "$OBSIDIAN_DIR/$OBSIDIAN_GIT_PROJECT" "$OBSIDIAN_GIT_DIR"
  fi
}

function directory_git_push() {
  DATE=$(date +"%d.%m.%Y");
  DIRECTORY_FOR_GIT_PUSH=${1:-"."}
  MESSAGE_FOR_GIT_PUSH=${2:-"Обновление за $DATE"}
  if [ -d "$DIRECTORY_FOR_GIT_PUSH" ]; then
    CURRENT_DIR=$(pwd); 
    cd $DIRECTORY_FOR_GIT_PUSH
    git add .
    git commit -m "$MESSAGE_FOR_GIT_PUSH"
    git push
    cd $CURRENT_DIR
  fi
}

function see_vpn_is_active() {
  # задаём переменную в которой ищем запущен ли wireguard
  # -c считает количество упоминаний
	isactive=$(sudo wg show | grep -c wg0);
	if sudo wg show | grep -c wg0 2>&1 >/dev/null; then
		# /dev/null 2>&1 - отключает вывод у указанного уровня (2 и 1) вывода в терминал
		wg-quick down wg0 > /dev/null 2>&1 && echo "VPN Deactivate";
	# если переменная equal (равна) False
	elif [ $isactive -eq 0 ]; then
		wg-quick up wg0 > /dev/null 2>&1 && echo "VPN Activate";
	fi
}

function mount_webdav() {
  # Проверяем, существуют ли целевые директории монтирования, и, если нет, создаем их.
  if [ ! -d "$WEBDAV_DIR" ]; then
    echo "Создание директории $WEBDAV_DIR";
    sudo mkdir $WEBDAV_DIR;
  fi
  # Монтируем WebDAV каталоги
  echo "Монтирование $WEBDAV_URL";
  sudo mount -t davfs -o rw $WEBDAV_URL $WEBDAV_DIR;
  cd $WEBDAV_DIR;
  pwd;
}

# Принимает на вход два аргумента:
# $1 - файл (архив) для бэкапа
# $2 - директорию, куда нужно сохранить бэкап
function backup_zip_file_on_mailcloud() {
  NAME_DIR=$(date +"%d.%m.%Y");
  FILE_BACKUP="$1/$2";
  DIR_BACKUP=$3;  
  cd $DIR_BACKUP;
  if [ ! -d "$NAME_DIR" ]; then
    sudo mkdir $NAME_DIR;
    echo "Создана новая директория $NAME_DIR";
  else
    echo "Переход в директорию $NAME_DIR";
  fi
  CLOUD_DIR="$3/$NAME_DIR/";
  echo "Переносим $FILE_BACKUP в: $NAME_DIR";
  sudo mv $FILE_BACKUP $CLOUD_DIR;
  echo "Перенос завершён!";
  # Вернуться в домашнюю директорию
  cd ~;
}

function unmount_webdav() {
    sleep 5
    counttry=0
    while [ $counttry -lt 10 ]
    do
      echo "Размонтирование $WEBDAV_URL";
      isunmount=$(sudo umount -f $WEBDAV_DIR | grep -c OK);
      # Ведём подсчёт выведенных команд с "ОК"
      # и просто сравниваем (если больше нуля)
      if [ $isunmount -gt 0 ]; then
        # После размонтирования, удаляем пустой каталог
        echo "Удаление пустой директории $WEBDAV_URL";
        sudo rm -r $WEBDAV_DIR;
        cd ~;
        break
      else
        echo "Размонтирование $WEBDAV_URL - Не выполненно!";
        echo "Делаем попытку $counttry из 10 ..."
        sleep 10
      fi
      counttry=$[ $counttry + 1 ]
    done
}

# В первом аргументе передоётся имя файла "obsidian.zip"
# Во втором аргументе - директория или файл для архивации
function zip_files(){
  NAME_ZIP=$1;
  DIR_FOR_ZIP=$2;
  CURRENT_DIR=$(pwd);
  cd $DIR_FOR_ZIP;
  if [ -e "$NAME_ZIP" ]; then
    rm $NAME_ZIP;
    echo "Прошлый архив удалён!"
  fi
  echo "Приступаем к архивации..."
  zip -r $NAME_ZIP $DIR_FOR_ZIP > /dev/null 2>&1;
  iscreate=$(ll -la | grep -c $NAME_ZIP);
  if [ ! $iscreate -eq 0 ]; then
    echo "Архив $NAME_ZIP создан!";
    pwd;
  fi
  cd $CURRENT_DIR;
}

# «Безопасная» версия __git_ps1, позволяющая избежать ошибок в системах, в которых ее нет.
function git_branche {
  command -v __git_ps1 > /dev/null && __git_ps1 " (%s)"
}
