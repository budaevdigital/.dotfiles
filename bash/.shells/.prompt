############## PROMPT OPTIONS ################

# Элементы
histnumb='\!' # Показывает номер команды в истории
startpromt='\$' # Начальная строка ввода команды
git='\$(git_branche)' # Показывает ветку в гит. Старое: (git branch 2>/dev/null | grep '"'"'^*'"'"' | colrm 1 2)
timeprompt='\A' # Без секунд
shrthostname='\u' # Хостнейм без .


# Эффекты
dimefct='\[\e[0;2m\]' # Приглушенный стандартный цвет
blincefct='\[\e[0;5m\]' # Мигание

# Цвета
txtblk='\[\e[0;30m\]' # Black - Regular
txtred='\[\e[0;31m\]' # Red
txtgrn='\[\e[0;32m\]' # Green
txtylw='\[\e[0;33m\]' # Yellow
txtblu='\[\e[0;34m\]' # Blue
txtpur='\[\e[0;35m\]' # Purple
txtcyn='\[\e[0;36m\]' # Cyan
txtwht='\[\e[0;37m\]' # White
bldblk='\[\e[1;30m\]' # Black - Bold
bldred='\[\e[1;31m\]' # Red
bldgrn='\[\e[1;32m\]' # Green
bldylw='\[\e[1;33m\]' # Yellow
bldblu='\[\e[1;34m\]' # Blue
bldpur='\[\e[1;35m\]' # Purple
bldcyn='\[\e[1;36m\]' # Cyan
bldwht='\[\e[1;37m\]' # White
unkblk='\[\e[4;30m\]' # Black - Underline
undred='\[\e[4;31m\]' # Red
undgrn='\[\e[4;32m\]' # Green
undylw='\[\e[4;33m\]' # Yellow
undblu='\[\e[4;34m\]' # Blue
undpur='\[\e[4;35m\]' # Purple
undcyn='\[\e[4;36m\]' # Cyan
undwht='\[\e[4;37m\]' # White
bakblk='\[\e[40m\]'   # Black - Background
bakred='\[\e[41m\]'   # Red
badgrn='\[\e[42m\]'   # Green
bakylw='\[\e[43m\]'   # Yellow
bakblu='\[\e[44m\]'   # Blue
bakpur='\[\e[45m\]'   # Purple
bakcyn='\[\e[46m\]'   # Cyan
bakwht='\[\e[47m\]'   # White
txtrst='\[\e[0m\]'    # Text Reset

# Prompt цвета
atC="${txtpur}"
nameC="${txtpur}"
hostC="${txtpur}"
pathC="${txtgrn}"
gitC="${txtpur}"
pointerC="${txtgrn}"
normalC="${txtwht}"

# Красный цвет пользователя для root
if [ "${UID}" -eq "0" ]; then 
  nameC="${txtred}" 
fi

# Формируем кастомную строку
export PS1="${nameC}\u${atC}@${hostC}\h:${pathC}\w${gitC}\$(git_branche)${pointerC}▶${normalC} "


# «Безопасная» версия __git_ps1, позволяющая избежать ошибок в системах, в которых ее нет.
function git_branche {
  
  command -v __git_ps1 > /dev/null && __git_ps1 | colrm 1 2" (%s)"
}

# сокращать путь к текущему каталогу в строке терминала
export PROMPT_DIRTRIM=5

# PS1='\[\e[0;2m\][\[\e[0;2m\]\u\[\e[0;2m\]@\[\e[0;2m\]\h\[\e[0;2m\]]\[\e[0;2m\]> 
# \[\e[0;1;38;5;210m\]$(git branch 2>/dev/null | grep '"'"'^*'"'"' | colrm 1 2) 
# \[\e[0;38;5;37m\]\w\n\[\e[0;2;38;5;98m\]\! \[\e[0;2m\].\[\e[0;2m\]/\[\e[0;1;2;97m\]\W\[\e[0;2m\]>\[\e[0;38;5;41m\]\$ \[\e[0m\]'








# Change up a variable number of directories
# E.g:
#   cu   -> cd ../
#   cu 2 -> cd ../../
#   cu 3 -> cd ../../../
function cu {
    local count=$1
    if [ -z "${count}" ]; then
        count=1
    fi
    local path=""
    for i in $(seq 1 ${count}); do
        path="${path}../"
    done
    cd $path
}


# Open all modified files in vim tabs
function vimod {
    vim -p $(git status -suall | awk '{print $2}')
}

# Open files modified in a git commit in vim tabs; defaults to HEAD. Pop it in your .bashrc
# Examples: 
#     virev 49808d5
#     virev HEAD~3
function virev {
    commit=$1
    if [ -z "${commit}" ]; then
      commit="HEAD"
    fi
    rootdir=$(git rev-parse --show-toplevel)
    sourceFiles=$(git show --name-only --pretty="format:" ${commit} | grep -v '^$')
    toOpen=""
    for file in ${sourceFiles}; do
      file="${rootdir}/${file}"
      if [ -e "${file}" ]; then
        toOpen="${toOpen} ${file}"
      fi
    done
    if [ -z "${toOpen}" ]; then
      echo "No files were modified in ${commit}"
      return 1
    fi
    vim -p ${toOpen}
}

